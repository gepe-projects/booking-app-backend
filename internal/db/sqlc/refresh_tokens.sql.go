// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
  id, user_id, device, user_agent, ip_address, refresh_token, expires_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, device, user_agent, ip_address, refresh_token, revoked_at, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	ID           uuid.UUID          `json:"id"`
	UserID       uuid.UUID          `json:"user_id"`
	Device       pgtype.Text        `json:"device"`
	UserAgent    pgtype.Text        `json:"user_agent"`
	IpAddress    pgtype.Text        `json:"ip_address"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.Device,
		arg.UserAgent,
		arg.IpAddress,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Device,
		&i.UserAgent,
		&i.IpAddress,
		&i.RefreshToken,
		&i.RevokedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredRefreshTokenByUserID = `-- name: DeleteExpiredRefreshTokenByUserID :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
  AND expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteExpiredRefreshTokenByUserID, userID)
	return err
}

const getActiveRefreshTokensByUserID = `-- name: GetActiveRefreshTokensByUserID :many
SELECT id, user_id, device, user_agent, ip_address, refresh_token, revoked_at, expires_at, created_at FROM refresh_tokens
WHERE user_id = $1
  AND revoked_at IS NULL
  AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetActiveRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getActiveRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Device,
			&i.UserAgent,
			&i.IpAddress,
			&i.RefreshToken,
			&i.RevokedAt,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshTokenByID = `-- name: GetRefreshTokenByID :one
SELECT id, user_id, device, user_agent, ip_address, refresh_token, revoked_at, expires_at, created_at FROM refresh_tokens
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetRefreshTokenByID(ctx context.Context, id uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByID, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Device,
		&i.UserAgent,
		&i.IpAddress,
		&i.RefreshToken,
		&i.RevokedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT id, user_id, device, user_agent, ip_address, refresh_token, revoked_at, expires_at, created_at FROM refresh_tokens
WHERE refresh_token = $1
LIMIT 1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, refreshToken string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByToken, refreshToken)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Device,
		&i.UserAgent,
		&i.IpAddress,
		&i.RefreshToken,
		&i.RevokedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const revokeAllRefreshTokenExcept = `-- name: RevokeAllRefreshTokenExcept :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE user_id = $1
  AND id != $2
  AND revoked_at IS NULL
`

type RevokeAllRefreshTokenExceptParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RevokeAllRefreshTokenExcept(ctx context.Context, arg RevokeAllRefreshTokenExceptParams) error {
	_, err := q.db.Exec(ctx, revokeAllRefreshTokenExcept, arg.UserID, arg.ID)
	return err
}

const revokeAllRefreshTokensByUser = `-- name: RevokeAllRefreshTokensByUser :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE user_id = $1
  AND revoked_at IS NULL
`

func (q *Queries) RevokeAllRefreshTokensByUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllRefreshTokensByUser, userID)
	return err
}

const revokeRefreshTokenByToken = `-- name: RevokeRefreshTokenByToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE refresh_token = $1
`

func (q *Queries) RevokeRefreshTokenByToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, revokeRefreshTokenByToken, refreshToken)
	return err
}
